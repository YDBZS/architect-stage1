<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.architect.mapper.ItemsMapperCustom" >
  
  <select id="queryItemComments" parameterType="map" resultType="com.architect.pojo.vo.ItemCommentVO">
    select ic.comment_level commentLevel,
           ic.content,
           ic.sepc_name specName,
           ic.created_time createdTime,
           u.face userFace,
           u.nickname
    from
      items_comments ic
    left join
      users u
    on
      ic.user_id = u.id
    where
      ic.item_id = #{paramsMap.itemId}
    <if test="paramsMap.level != null and paramsMap.level != ''">
      and
        ic.comment_level = #{paramsMap.level}
    </if>
  </select>

    <select id="searchItems" parameterType="map" resultType="com.architect.pojo.vo.SearchItemsVO">
        select i.id          itemId,
               i.item_name   itemName,
               i.sell_counts sellCounts,
               ii.url        imgUrl,
               tempSpec.priceDiscount price
        from
            items i
        left join
            items_img ii
        on
            i.id = ii.item_id
        left join
            (select item_id,
                    min(price_discount) priceDiscount
             from items_spec
             group by item_id) tempSpec
        on
            i.id = tempSpec.item_id
        where
            ii.is_main = 1
        <if  test="paramsMap.keywords != null and paramsMap.keywords != ''">
            and i.item_name like '%${paramsMap.keywords}%'
        </if>
        order by
        <choose>
            <when test="paramsMap.sort == &quot;c&quot; ">
                i.sell_counts desc
            </when>
            <when test="paramsMap.sort == &quot;p&quot; ">
                tempSpec.priceDiscount asc
            </when>
            <otherwise>
                i.item_name asc
            </otherwise>
        </choose>
  </select>
<!--     k : 默认，代表默认排序，根据name-->
<!--     c : 根据向量排序-->
<!--     p : 根据价格排序-->
<!--     @quot;  转义单引号  -->

    <select id="searchItemsByThirdCat" parameterType="map" resultType="com.architect.pojo.vo.SearchItemsVO">
        select i.id          itemId,
            i.item_name   itemName,
            i.sell_counts sellCounts,
            ii.url        imgUrl,
            tempSpec.priceDiscount price
        from
        items i
        left join
        items_img ii
        on
        i.id = ii.item_id
        left join
        (select item_id,
        min(price_discount) priceDiscount
        from items_spec
        group by item_id) tempSpec
        on
            i.id = tempSpec.item_id
        where
            ii.is_main = 1
        and
            i.cat_id = #{paramsMap.catId}
        order by
        <choose>
            <when test="paramsMap.sort == &quot;c&quot; ">
                i.sell_counts desc
            </when>
            <when test="paramsMap.sort == &quot;p&quot; ">
                tempSpec.priceDiscount asc
            </when>
            <otherwise>
                i.item_name asc
            </otherwise>
        </choose>
    </select>

    <select id="queryItemBySpecIds" parameterType="list" resultType="com.architect.pojo.vo.ShopcartVO">
        select
            t_items.id itemId,
            t_items.item_name itemName,
            t_items_img.url itemImgUrl,
            t_items_spec.id specId,
            t_items_spec.name specName,
            t_items_spec.price_discount priceDiscount,
            t_items_spec.price_normal priceNormal
        from
            items_spec t_items_spec
        left join
            items t_items
        on t_items_spec.item_id = t_items.id
        left join
            items_img t_items_img
        on
            t_items_img.item_id = t_items.id
        where
            t_items_img.is_main = 1
        and
            t_items_spec.id in
            <foreach collection="paramsList" index="index" item="specId" open="(" close=")" separator=",">
                #{specId}
            </foreach>
    </select>

</mapper>